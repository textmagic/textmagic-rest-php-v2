<?php
/**
 * FavoriteContact
 *
 * PHP version 5
 *
 * @category Class
 * @package  TextMagic
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TextMagic\Models;

use \ArrayAccess;
use \TextMagic\ObjectSerializer;

/**
 * FavoriteContact Class Doc Comment
 *
 * @category Class
 * @package  TextMagic
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FavoriteContact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FavoriteContact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entityId' => 'int',
        'entityType' => 'string',
        'primaryLabel' => 'string',
        'secondaryLabel' => 'string',
        'tertiaryLabel' => 'string',
        'avatar' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'entityId' => null,
        'entityType' => null,
        'primaryLabel' => null,
        'secondaryLabel' => null,
        'tertiaryLabel' => null,
        'avatar' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entityId' => 'entityId',
        'entityType' => 'entityType',
        'primaryLabel' => 'primaryLabel',
        'secondaryLabel' => 'secondaryLabel',
        'tertiaryLabel' => 'tertiaryLabel',
        'avatar' => 'avatar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entityId' => 'setEntityId',
        'entityType' => 'setEntityType',
        'primaryLabel' => 'setPrimaryLabel',
        'secondaryLabel' => 'setSecondaryLabel',
        'tertiaryLabel' => 'setTertiaryLabel',
        'avatar' => 'setAvatar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entityId' => 'getEntityId',
        'entityType' => 'getEntityType',
        'primaryLabel' => 'getPrimaryLabel',
        'secondaryLabel' => 'getSecondaryLabel',
        'tertiaryLabel' => 'getTertiaryLabel',
        'avatar' => 'getAvatar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENTITY_TYPE__LIST = 'list';
    const ENTITY_TYPE_CONTACT = 'contact';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE__LIST,
            self::ENTITY_TYPE_CONTACT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entityId'] = isset($data['entityId']) ? $data['entityId'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['primaryLabel'] = isset($data['primaryLabel']) ? $data['primaryLabel'] : null;
        $this->container['secondaryLabel'] = isset($data['secondaryLabel']) ? $data['secondaryLabel'] : null;
        $this->container['tertiaryLabel'] = isset($data['tertiaryLabel']) ? $data['tertiaryLabel'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entityId'] === null) {
            $invalidProperties[] = "'entityId' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($this->container['entityType']) && !in_array($this->container['entityType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entityType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['primaryLabel'] === null) {
            $invalidProperties[] = "'primaryLabel' can't be null";
        }
        if ($this->container['secondaryLabel'] === null) {
            $invalidProperties[] = "'secondaryLabel' can't be null";
        }
        if ($this->container['tertiaryLabel'] === null) {
            $invalidProperties[] = "'tertiaryLabel' can't be null";
        }
        if ($this->container['avatar'] === null) {
            $invalidProperties[] = "'avatar' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entityId
     *
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entityId'];
    }

    /**
     * Sets entityId
     *
     * @param int $entityId List or Contact ID.
     *
     * @return $this
     */
    public function setEntityId($entityId)
    {
        $this->container['entityId'] = $entityId;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType Entity type which should be marked as **favorite**.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!in_array($entityType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entityType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets primaryLabel
     *
     * @return string
     */
    public function getPrimaryLabel()
    {
        return $this->container['primaryLabel'];
    }

    /**
     * Sets primaryLabel
     *
     * @param string $primaryLabel Contact first name/last name if entityType is **contact**; List name if entity type is **list**.
     *
     * @return $this
     */
    public function setPrimaryLabel($primaryLabel)
    {
        $this->container['primaryLabel'] = $primaryLabel;

        return $this;
    }

    /**
     * Gets secondaryLabel
     *
     * @return string
     */
    public function getSecondaryLabel()
    {
        return $this->container['secondaryLabel'];
    }

    /**
     * Sets secondaryLabel
     *
     * @param string $secondaryLabel Phone number if entityType is **contact**; List contacts number if entity type is **list**.
     *
     * @return $this
     */
    public function setSecondaryLabel($secondaryLabel)
    {
        $this->container['secondaryLabel'] = $secondaryLabel;

        return $this;
    }

    /**
     * Gets tertiaryLabel
     *
     * @return string
     */
    public function getTertiaryLabel()
    {
        return $this->container['tertiaryLabel'];
    }

    /**
     * Sets tertiaryLabel
     *
     * @param string $tertiaryLabel Contact country if entityType is **contact**; else, null.
     *
     * @return $this
     */
    public function setTertiaryLabel($tertiaryLabel)
    {
        $this->container['tertiaryLabel'] = $tertiaryLabel;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar avatar
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


